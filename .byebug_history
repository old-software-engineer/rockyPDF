c
File.join(Rails.root, html_file_dir(pdfpre))
url_format
"#{url_format ? '' : "public/"}pdfs/#{bucket_code}"
url_format
#{url_format ? '' : "public/"}pdfs/#{bucket_code}
pdf_file_path("pdf")
bucket_code
pdfpre
c
@registrant.pdf_ready?
c
pdf_url
c
@registrant.pdf_ready?
@registrant.reload
@registrant.pdf_ready?
c
pdf_url
c
@registrant.pdf_ready?
c
@registrant.pdf_ready
c
pdf_url
c
@registrant.pdf_ready
c
@registrant
c
exit
@registrant.pdf_ready?
c
Registrant.destroy_all
c
resp
c
registrant_id
c
resp
c
continue
c
continue
c
PriorityPdfGeneration.receive_and_generate
c
PriorityPdfGeneration.receive_and_generate
c
continue
exit
PriorityPdfGeneration.receive_and_generate
@registrant.delay.deliver_confirmation_email
@registrant.delay.eliver_confirmation_email
@registrant.delay
@registrant
@regisrant
@regisration
@regisration.delay.handler
@regisration.delay.present?
@regisration.delay
@regisration.delay.present?
@regisration.delay
@regisration.delay.deliver_confirmation_email
@regisration.delay
@regisration.delay.
@regisration.delay.send_emails?
@regisration.delay
continue
c
continue
exit
cart.total_price
c
continue
c
continue
c
continue
c
v
@registrant.pdf_ready?
c
self.pdf_ready = true
self.pdf_ready?
self.pdf_ready = true
self.pdf_ready?
self.pdf_ready
self
c
find_registrant
c
find_registrant
c
@registrant.save
@registrant.pdf_ready = true
@registrant.status
@registrant.pdf_ready?
@registrant
n
@registrant
c
 @registrant.queue_pdf_delivery
@registrant
find_registrant(:download)
c
!d
d!
d
n
c
@registrant.pdf_ready?
@registrant
continue
c
continue
c
continue
c
continue
c
continue
c
continue
c
resp
continue
c
queue_url
c
continue
c
continue
exit
c
@registrant.pdf_delivery
n
c
@registrant.pdf_delivery
n
@registrant
c
@registrant
n
@registrant
c
resp
c
exit
e
c
e
c
exit
 ENV['AWS_ACCESS_KEY_ID']
e
c
exit
ENV['SQS_AWS_SECRET_ACCESS_KEY']
ENV['SQS_AWS_ACCESS_KEY_ID']
@@queue_client ||= Aws::SQS::Client.new(region: 'us-west-2',access_key_id: ENV['SQS_AWS_ACCESS_KEY_ID'],secret_access_key: ENV['SQS_AWS_SECRET_ACCESS_KEY'])
e
c
exit
e
c
ENV['SQS_AWS_SECRET_ACCESS_KEY']
ENV['SQS_AWS_ACCESS_KEY_ID']
c
exit
ENV['SQS_AWS_ACCESS_KEY_ID']
e
c
exit
e
c
queue_url
e
c
exit
queue.create_queue({queue_name: 'first_queue',attributes: {"DelaySeconds" => "60", "MessageRetentionPeriod" => "86400"}})
queue.create_queue({queue_name: queue_name,attributes: {"DelaySeconds" => "60", "MessageRetentionPeriod" => "86400"}})
queue.queue.create_queue({queue_name: queue_name,attributes: {"DelaySeconds" => "60", "MessageRetentionPeriod" => "86400"}})
    }
      "MessageRetentionPeriod" => "86400" # Delete message after 1 day (24 hours * 60 minutes * 60 seconds).    
      "DelaySeconds" => "60", # Delay message delivery for 1 minute (60 seconds).
    attributes: {
    queue_name: queue_name,
queue.  sqs.create_queue({
queue
sqs
e
c
ENV
exit
ENV['AWS_ACCESS_KEY_ID']
ENV['SQS_QUEUE_URL']
ENV
exit
ENV["SQS_QUEUE_URL"]
e
c
exit
c
continue
c
continue
c
continue
c
n
continue
n
continue
n
c
exit
e.message
e
c
continue
c
continue
c
continue
c
queue_url
c
continue
c
continue
c
params
e
c
@@queue_client ||= Aws::SQS::Client.new(region: 'us-west-2',access_key_id: ENV['SQS_AWS_ACCESS_KEY_ID'],secret_access_key: ENV['SQS_AWS_SECRET_ACCESS_KEY'])
=> 42:       secret_access_key: ENV['SQS_AWS_SECRET_ACCESS_KEY'])
   41:       access_key_id: ENV['SQS_AWS_ACCESS_KEY_ID'],
   40:       region: 'us-west-2',
 @@queue_client ||= Aws::SQS::Client.new(
c
self.email_address.blank?
n
c
continue
c
continue
c
continue
c
exit
c
continue
c
continue
exit
